{"version":3,"sources":["service/upload.ts","components/business/ArticleDetailContentComponent/braft-extend.ts","components/business/ArticleDetailContentComponent/richText.tsx"],"names":["uploadFile","file","Promise","resolve","reject","destroy","loading","fileReader","FileReader","readAsDataURL","onload","e","target","result","url","title","name","objectId","Date","now","error","BraftEditor","use","Table","defaultColumns","defaultRows","withDropdown","exportAttrString","ColorPicker","theme","ArticleDetailUEditComponent","inject","observer","submitContent","handleEditorChange","editorState","props","articleDetailStore","validError","changeDetail","detail","key","EArticleEditError","contentError","value","toText","renderType","EArticleRenderType","richText","EArticleDetailKey","draftDetail","handleUploadFile","params","then","success","meta","id","alt","loop","autoPlay","controls","poster","catch","msg","this","className","placeholder","onChange","onSave","media","uploadFn","Component"],"mappings":"uKAEaA,EAAa,SACzBC,GAMA,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5B,IAAQC,UAER,IAAMC,EAAU,IAAQA,QAAQ,oCAAY,GACtCC,EAAa,IAAIC,WACvBD,EAAWE,cAAcR,GACzBM,EAAWG,OAAS,SAAAC,GACfA,EAAEC,QAAUD,EAAEC,OAAOC,OACxBV,EAAQ,CACPW,IAAKH,EAAEC,OAAOC,OACdE,MAAOd,EAAKe,KACZC,SAAUC,KAAKC,MAAQ,MAGxB,IAAQC,MAAR,UAAiBnB,EAAKe,KAAtB,yCACAZ,KAEDE,U,0OCNHe,IAAYC,IAAIC,IATK,CACpBC,eAAgB,EAChBC,YAAa,EACbC,cAAc,EACdC,iBAAkB,MAOnB,I,EAMAN,IAAYC,IAAIM,IANW,CAG1BC,MAAO,W,IC2BFC,EAFLC,YAAO,qB,GACPC,Y,6MAIAC,cAAgB,a,EAIhBC,mBAAqB,SAACC,GAA8B,IAAD,EACL,EAAKC,MAAMC,mBAAhDC,EAD0C,EAC1CA,WAAYC,EAD8B,EAC9BA,aAAcC,EADgB,EAChBA,OAClCF,EAAW,CACVG,IAAKC,IAAkBC,aACvBC,OACET,EAAYU,WACP,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQM,cAAeC,IAAmBC,WAE5CT,EAAa,CACZE,IAAKQ,IAAkBC,YACvBN,MAAOT,K,EAITgB,iBAAmB,SAACC,GACnBpD,YAAWoD,EAAOnD,MAChBoD,MAAK,YAAqB,IAAlBvC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAGbqC,EAAOE,QAAQ,CACdxC,IAAKA,EACLyC,KAAM,CACLC,GAAI,MACJzC,MAAOA,EACP0C,IAAK1C,EACL2C,MAAM,EACNC,UAAU,EACVC,UAAU,EACVC,OAAQ,0BAIVC,OAAM,SAAA1C,GAENgC,EAAOhC,MAAM,CACZ2C,IAAK3C,Q,wEAYC,IACDoB,EAAWwB,KAAK5B,MAAMC,mBAAtBG,OACR,OACC,kBAAC,IAAD,CACCyB,UAAU,YACVC,YAAY,gDACZtB,MAAK,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAQU,YACfiB,SAAUH,KAAK9B,mBACfkC,OAAQJ,KAAK/B,cACboC,MAAO,CACNC,SAAUN,KAAKb,wB,GAhEsBoB,e,MAuE1BzC","file":"static/js/ArticleDetailRichTextComponent.9ed06818.chunk.js","sourcesContent":["import { message } from 'antd';\n\nexport const uploadFile = (\n\tfile: File,\n): Promise<{\n\turl: string;\n\ttitle: string;\n\tobjectId: string;\n}> => {\n\treturn new Promise((resolve, reject) => {\n\t\tmessage.destroy();\n\t\t// 伪文件上传预览\n\t\tconst loading = message.loading('文件上传中...', 0);\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.readAsDataURL(file);\n\t\tfileReader.onload = e => {\n\t\t\tif (e.target && e.target.result) {\n\t\t\t\tresolve({\n\t\t\t\t\turl: e.target.result as string,\n\t\t\t\t\ttitle: file.name,\n\t\t\t\t\tobjectId: Date.now() + '',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmessage.error(`${file.name}文件上传失败`);\n\t\t\t\treject();\n\t\t\t}\n\t\t\tloading();\n\t\t};\n\t});\n};\n","import BraftEditor from 'braft-editor';\nimport 'braft-editor/dist/index.css';\n\n// @ts-ignore\nimport Table from 'braft-extensions/dist/table';\nimport 'braft-extensions/dist/table.css';\n\n// @ts-ignore\nimport ColorPicker from 'braft-extensions/dist/color-picker';\nimport 'braft-extensions/dist/color-picker.css';\n\nconst tableOptions = {\n\tdefaultColumns: 3, // 默认列数\n\tdefaultRows: 3, // 默认行数\n\twithDropdown: true, // 插入表格前是否弹出下拉菜单\n\texportAttrString: '', // 指定输出HTML时附加到table标签上的属性字符串\n\t// includeEditors: ['editor-id-1'], // 指定该模块对哪些BraftEditor生效，不传此属性则对所有BraftEditor有效\n\t// excludeEditors: ['editor-id-2'], // 指定该模块对哪些BraftEditor无效\n};\n\nBraftEditor.use(Table(tableOptions));\n\nconst colorPickerOptions = {\n\t// includeEditors: ['editor-id-1'], // 指定该模块对哪些BraftEditor生效，不传此属性则对所有BraftEditor有效\n\t// excludeEditors: ['editor-id-2'],  // 指定该模块对哪些BraftEditor无效\n\ttheme: 'light', // 指定取色器样式主题，支持dark和light两种样式\n};\n\nBraftEditor.use(ColorPicker(colorPickerOptions));\n","import React, { Component, ComponentClass } from 'react';\n\nimport { inject, observer } from 'mobx-react';\n// 引入编辑器组件\nimport BraftEditor, { EditorState } from 'braft-editor';\n\nimport { StoreType } from '@/store/store';\n\nimport {\n\tEArticleDetailKey,\n\tEArticleEditError,\n\tEArticleRenderType,\n} from '@/store/ArticleDetailStore/article.enum';\n\nimport { uploadFile } from '@/service/upload';\n\n// 引入编辑器样式\nimport './style.scss';\n\nimport './braft-extend';\n\nexport type ArticleDetailUEditComponentPropType = Pick<\n\tStoreType,\n\t'articleDetailStore'\n>;\n\n// 通过param.file获取到要上传的文件，\n// 然后使用XMLHttpRequest或者你常用的网络请求库将文件上传到服务器，\n// 将服务器返回的文件url通过param.success函数回传给编辑器即可；\n// 如果能监控到文件上传进度，也可以通过param.progress函数将上传进度告知编辑器，编辑器会友好的以进度条的形式展示出来；\n// 如果上传出现问题，则需要通过param.error函数告知编辑器。\nexport type UploadFileType = {\n\tfile: File;\n\tprogress: (progress: number) => void;\n\tlibraryId: string;\n\tsuccess: (res: {\n\t\turl: string;\n\t\tmeta: {\n\t\t\tid: string;\n\t\t\ttitle: string;\n\t\t\talt: string;\n\t\t\tloop: boolean; // 指定音视频是否循环播放\n\t\t\tautoPlay: boolean; // 指定音视频是否自动播放\n\t\t\tcontrols: boolean; // 指定音视频是否显示控制栏\n\t\t\tposter: string; // 指定视频播放器的封面\n\t\t};\n\t}) => void;\n\terror: (err: { msg: string }) => void;\n};\n\n@inject('articleDetailStore')\n@observer\nclass ArticleDetailUEditComponent extends Component<\n\tArticleDetailUEditComponentPropType\n> {\n\tsubmitContent = () => {\n\t\t// 在编辑器获得焦点时按下ctrl+s会执行此方法\n\t};\n\n\thandleEditorChange = (editorState: EditorState) => {\n\t\tconst { validError, changeDetail, detail } = this.props.articleDetailStore;\n\t\tvalidError({\n\t\t\tkey: EArticleEditError.contentError,\n\t\t\tvalue:\n\t\t\t\t!editorState.toText() &&\n\t\t\t\tdetail?.renderType === EArticleRenderType.richText,\n\t\t});\n\t\tchangeDetail({\n\t\t\tkey: EArticleDetailKey.draftDetail,\n\t\t\tvalue: editorState,\n\t\t});\n\t};\n\t// 如果未指定uploadFn，添加到媒体库的图片将会自动转换为base64的形式，而视频和音频则无法被添加到媒体库。\n\thandleUploadFile = (params: UploadFileType) => {\n\t\tuploadFile(params.file)\n\t\t\t.then(({ url, title }) => {\n\t\t\t\t// 假设服务端直接返回文件上传后的地址\n\t\t\t\t// 上传成功后调用param.success并传入上传后的文件地址\n\t\t\t\tparams.success({\n\t\t\t\t\turl: url,\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tid: 'xxx',\n\t\t\t\t\t\ttitle: title,\n\t\t\t\t\t\talt: title,\n\t\t\t\t\t\tloop: true, // 指定音视频是否循环播放\n\t\t\t\t\t\tautoPlay: true, // 指定音视频是否自动播放\n\t\t\t\t\t\tcontrols: true, // 指定音视频是否显示控制栏\n\t\t\t\t\t\tposter: 'http://xxx/xx.png', // 指定视频播放器的封面\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\t// 上传发生错误时调用param.error\n\t\t\t\tparams.error({\n\t\t\t\t\tmsg: error,\n\t\t\t\t});\n\t\t\t});\n\n\t\t// const progressFn = (event: any) => {\n\t\t// \t// 上传进度发生变化时调用param.progress\n\t\t// \tparams.progress((event.loaded / event.total) * 100);\n\t\t// };\n\t\t//\n\t\t// xhr.upload.addEventListener('progress', progressFn, false);\n\t};\n\n\trender() {\n\t\tconst { detail } = this.props.articleDetailStore;\n\t\treturn (\n\t\t\t<BraftEditor\n\t\t\t\tclassName=\"rich-text\"\n\t\t\t\tplaceholder=\"请输入文章内容...\"\n\t\t\t\tvalue={detail?.draftDetail}\n\t\t\t\tonChange={this.handleEditorChange}\n\t\t\t\tonSave={this.submitContent}\n\t\t\t\tmedia={{\n\t\t\t\t\tuploadFn: this.handleUploadFile,\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default (ArticleDetailUEditComponent as unknown) as ComponentClass;\n"],"sourceRoot":""}