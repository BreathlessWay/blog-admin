{"version":3,"sources":["utils/compose.ts","pages/PhotographyPage/PhotographyIndexPage/index.tsx"],"names":["compose","funcs","length","arg","reduce","a","b","PhotoAlbumComponent","lazy","inject","observer","props","getList","photoAlbumStore","useEffect"],"mappings":"iHA6Ce,SAASA,IAA+B,IAAD,uBAAnBC,EAAmB,yBAAnBA,EAAmB,gBACrD,OAAqB,IAAjBA,EAAMC,OAEF,SAAIC,GAAJ,OAAeA,GAGF,IAAjBF,EAAMC,OACFD,EAAM,GAGPA,EAAMG,QAAO,SAACC,EAAGC,GAAJ,OAAU,kBAAkBD,EAAEC,EAAC,WAAD,kBArDnD,mC,iCCFA,6CAQMC,EAAsBC,gBAAK,kBAChC,6EAecR,sBACdS,YAAO,mBACPC,IAFcV,EAVsD,SAAAW,GAAU,IACtEC,EAAYD,EAAME,gBAAlBD,QAMR,OAJAE,qBAAU,WACTF,MACE,CAACA,IAEG,kBAACL,EAAD","file":"static/js/PhotographyIndexPage.e661d22e.chunk.js","sourcesContent":["type Func<T extends any[], R> = (...a: T) => R;\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R;\n\nexport default function compose<F extends Function>(f: F): F;\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n\tf1: (a: A) => R,\n\tf2: Func<T, A>,\n): Func<T, R>;\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n\tf1: (b: B) => R,\n\tf2: (a: A) => B,\n\tf3: Func<T, A>,\n): Func<T, R>;\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n\tf1: (c: C) => R,\n\tf2: (b: B) => C,\n\tf3: (a: A) => B,\n\tf4: Func<T, A>,\n): Func<T, R>;\n\n/* rest */\nexport default function compose<R>(\n\tf1: (a: any) => R,\n\t...funcs: Function[]\n): (...args: any[]) => R;\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\n\nexport default function compose(...funcs: Function[]) {\n\tif (funcs.length === 0) {\n\t\t// infer the argument type so it is usable in inference down the line\n\t\treturn <T>(arg: T) => arg;\n\t}\n\n\tif (funcs.length === 1) {\n\t\treturn funcs[0];\n\t}\n\n\treturn funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}\n","import React, { FC, lazy, useEffect } from 'react';\n\nimport { inject, observer } from 'mobx-react';\n\nimport { StoreType } from '@/store/store';\n\nimport compose from '@/utils/compose';\n\nconst PhotoAlbumComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"PhotoAlbumComponent\" */ '@/components/business/PhotoAlbumComponent'\n\t),\n);\n\nconst PhotographyIndexPage: FC<Pick<StoreType, 'photoAlbumStore'>> = props => {\n\tconst { getList } = props.photoAlbumStore;\n\n\tuseEffect(() => {\n\t\tgetList();\n\t}, [getList]);\n\n\treturn <PhotoAlbumComponent />;\n};\n\nexport default compose<FC>(\n\tinject('photoAlbumStore'),\n\tobserver,\n)(PhotographyIndexPage);\n"],"sourceRoot":""}