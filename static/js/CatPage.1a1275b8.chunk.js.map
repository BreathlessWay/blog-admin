{"version":3,"sources":["utils/compose.ts","pages/CatPage/index.tsx"],"names":["compose","funcs","length","arg","reduce","a","b","CatFigureComponent","lazy","CatPictureListComponent","CatPaginationComponent","inject","observer","props","getList","catStore","useEffect"],"mappings":"iHA6Ce,SAASA,IAA+B,IAAD,uBAAnBC,EAAmB,yBAAnBA,EAAmB,gBACrD,OAAqB,IAAjBA,EAAMC,OAEF,SAAIC,GAAJ,OAAeA,GAGF,IAAjBF,EAAMC,OACFD,EAAM,GAGPA,EAAMG,QAAO,SAACC,EAAGC,GAAJ,OAAU,kBAAkBD,EAAEC,EAAC,WAAD,kBArDnD,mC,iCCFA,6CAQMC,EAAqBC,gBAAK,kBAC/B,6EAKKC,EAA0BD,gBAAK,kBACpC,6EAKKE,EAAyBF,gBAAK,kBACnC,6EAyBcR,sBAAYW,YAAO,YAAaC,IAAhCZ,EAlBsB,SAAAa,GAAU,IAEjCC,EACTD,EADHE,SAAYD,QAOb,OAJAE,qBAAU,WACTF,MACE,CAACA,IAGH,oCACC,kBAACP,EAAD,MACA,kBAACE,EAAD,MACA,kBAACC,EAAD","file":"static/js/CatPage.1a1275b8.chunk.js","sourcesContent":["type Func<T extends any[], R> = (...a: T) => R;\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R;\n\nexport default function compose<F extends Function>(f: F): F;\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n\tf1: (a: A) => R,\n\tf2: Func<T, A>,\n): Func<T, R>;\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n\tf1: (b: B) => R,\n\tf2: (a: A) => B,\n\tf3: Func<T, A>,\n): Func<T, R>;\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n\tf1: (c: C) => R,\n\tf2: (b: B) => C,\n\tf3: (a: A) => B,\n\tf4: Func<T, A>,\n): Func<T, R>;\n\n/* rest */\nexport default function compose<R>(\n\tf1: (a: any) => R,\n\t...funcs: Function[]\n): (...args: any[]) => R;\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\n\nexport default function compose(...funcs: Function[]) {\n\tif (funcs.length === 0) {\n\t\t// infer the argument type so it is usable in inference down the line\n\t\treturn <T>(arg: T) => arg;\n\t}\n\n\tif (funcs.length === 1) {\n\t\treturn funcs[0];\n\t}\n\n\treturn funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}\n","import React, { lazy, useEffect, FC } from 'react';\n\nimport { inject, observer } from 'mobx-react';\n\nimport { StoreType } from '@/store/store';\n\nimport compose from '@/utils/compose';\n\nconst CatFigureComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"CatFigureComponent\" */ '@/components/business/CatFigureComponent'\n\t),\n);\n\nconst CatPictureListComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"CatPictureListComponent\" */ '@/components/business/CatPictureListComponent'\n\t),\n);\n\nconst CatPaginationComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"CatPictureListComponent\" */ '@/components/business/CatPaginationComponent'\n\t),\n);\n\nexport type CatPagePropType = Pick<StoreType, 'catStore'>;\n\nconst CatPage: FC<CatPagePropType> = props => {\n\tconst {\n\t\tcatStore: { getList },\n\t} = props;\n\n\tuseEffect(() => {\n\t\tgetList();\n\t}, [getList]);\n\n\treturn (\n\t\t<>\n\t\t\t<CatFigureComponent />\n\t\t\t<CatPictureListComponent />\n\t\t\t<CatPaginationComponent />\n\t\t</>\n\t);\n};\n\nexport default compose<FC>(inject('catStore'), observer)(CatPage);\n"],"sourceRoot":""}