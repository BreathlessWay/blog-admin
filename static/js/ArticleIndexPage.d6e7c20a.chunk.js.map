{"version":3,"sources":["components/common/Gap/index.tsx","utils/compose.ts","pages/ArticlePage/ArticleIndexPage/index.tsx"],"names":["Gap","props","height","size","style","width","clear","compose","funcs","length","arg","reduce","a","b","ArticleFilterComponent","lazy","ArticleListComponent","inject","allStore","articleListStore","tagStore","observer","getList","getTags","useEffect"],"mappings":"iHAAA,oBA6BeA,IAvBoB,SAAAC,GAClC,IAAIC,EAAS,EAEb,OAAQD,EAAME,MACb,IAAK,KACJD,EAAS,EACT,MACD,IAAK,KACJA,EAAS,GACT,MACD,IAAK,KACJA,EAAS,GACT,MACD,IAAK,KACJA,EAAS,GACT,MACD,QACCA,EAAS,EAGX,OAAO,2BAAOE,MAAO,CAAEF,SAAQG,MAAO,OAAQC,MAAO,Y,iCCmBvC,SAASC,IAA+B,IAAD,uBAAnBC,EAAmB,yBAAnBA,EAAmB,gBACrD,OAAqB,IAAjBA,EAAMC,OAEF,SAAIC,GAAJ,OAAeA,GAGF,IAAjBF,EAAMC,OACFD,EAAM,GAGPA,EAAMG,QAAO,SAACC,EAAGC,GAAJ,OAAU,kBAAkBD,EAAEC,EAAC,WAAD,kBArDnD,mC,iCCFA,sDASMC,EAAyBC,gBAAK,kBACnC,6EAKKC,EAAuBD,gBAAK,kBACjC,6EA8BcR,sBACdU,aAAO,SAACC,GAAD,MAA0B,CAChCC,iBAAkBD,EAASC,iBAC3BC,SAAUF,EAASE,aAEpBC,IALcd,EApB8B,SAAAN,GAAU,IAEjCqB,EAEjBrB,EAFHkB,iBAAoBG,QACRC,EACTtB,EADHmB,SAAYG,QAQb,OALAC,qBAAU,WACTD,IACAD,MACE,CAACA,EAASC,IAGZ,oCACC,kBAACT,EAAD,MACA,kBAAC,IAAD,CAAKX,KAAK,OACV,kBAACa,EAAD","file":"static/js/ArticleIndexPage.d6e7c20a.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nexport type CommonGapPropType = {\n\tsize?: 'sm' | 'md' | 'lg' | 'xl';\n};\n\nconst Gap: FC<CommonGapPropType> = props => {\n\tlet height = 0;\n\n\tswitch (props.size) {\n\t\tcase 'sm':\n\t\t\theight = 8;\n\t\t\tbreak;\n\t\tcase 'md':\n\t\t\theight = 12;\n\t\t\tbreak;\n\t\tcase 'lg':\n\t\t\theight = 16;\n\t\t\tbreak;\n\t\tcase 'xl':\n\t\t\theight = 24;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\theight = 8;\n\t}\n\n\treturn <aside style={{ height, width: '100%', clear: 'both' }} />;\n};\n\nexport default Gap;\n","type Func<T extends any[], R> = (...a: T) => R;\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R;\n\nexport default function compose<F extends Function>(f: F): F;\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n\tf1: (a: A) => R,\n\tf2: Func<T, A>,\n): Func<T, R>;\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n\tf1: (b: B) => R,\n\tf2: (a: A) => B,\n\tf3: Func<T, A>,\n): Func<T, R>;\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n\tf1: (c: C) => R,\n\tf2: (b: B) => C,\n\tf3: (a: A) => B,\n\tf4: Func<T, A>,\n): Func<T, R>;\n\n/* rest */\nexport default function compose<R>(\n\tf1: (a: any) => R,\n\t...funcs: Function[]\n): (...args: any[]) => R;\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\n\nexport default function compose(...funcs: Function[]) {\n\tif (funcs.length === 0) {\n\t\t// infer the argument type so it is usable in inference down the line\n\t\treturn <T>(arg: T) => arg;\n\t}\n\n\tif (funcs.length === 1) {\n\t\treturn funcs[0];\n\t}\n\n\treturn funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}\n","import React, { FC, lazy, useEffect } from 'react';\n\nimport { inject, observer } from 'mobx-react';\n\nimport Gap from '@/components/common/Gap';\n\nimport compose from '@/utils/compose';\nimport { StoreType } from '@/store/store';\n\nconst ArticleFilterComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"ArticleFilterComponent\" */ '@/components/business/ArticleFilterComponent'\n\t),\n);\n\nconst ArticleListComponent = lazy(() =>\n\timport(\n\t\t/* webpackChunkName: \"ArticleListComponent\" */ '@/components/business/ArticleListComponent'\n\t),\n);\n\nexport type ArticlePagePropType = Pick<\n\tStoreType,\n\t'articleListStore' | 'tagStore'\n>;\n\nconst ArticlePage: FC<ArticlePagePropType> = props => {\n\tconst {\n\t\tarticleListStore: { getList },\n\t\ttagStore: { getTags },\n\t} = props;\n\n\tuseEffect(() => {\n\t\tgetTags();\n\t\tgetList();\n\t}, [getList, getTags]);\n\n\treturn (\n\t\t<>\n\t\t\t<ArticleFilterComponent />\n\t\t\t<Gap size=\"lg\" />\n\t\t\t<ArticleListComponent />\n\t\t</>\n\t);\n};\n\nexport default compose<FC>(\n\tinject((allStore: StoreType) => ({\n\t\tarticleListStore: allStore.articleListStore,\n\t\ttagStore: allStore.tagStore,\n\t})),\n\tobserver,\n)(ArticlePage);\n"],"sourceRoot":""}